{"version":3,"sources":["utils/urls.js","data/sourceDestinationSpecs.js","components/custom/connectors/ConnectorsSourceFields.js","views/app/connectors/new-source.js"],"names":["backendUrl","specs","sourceDefinitionId","documentationUrl","connectionSpecification","$schema","title","type","required","additionalProperties","properties","host","description","order","port","minimum","maximum","default","examples","database","username","password","airbyte_secret","ssl","replication_method","oneOf","method","enum","replication_slot","publication","jobInfo","id","configType","configId","createdAt","endedAt","succeeded","logs","logLines","ConnectorsSourceFields","select","fields","useState","inputs","setInputs","renderInputs","input","Object","entries","key","value","push","useEffect","a","Card","className","CardBody","name","onSubmit","event","errors","values","length","map","element","console","log","Label","includes","Input","NewSource","dropdownSplitOpen","setDropdownSplitOpen","sources","at","setSelect","setName","history","useHistory","handleClick","requestOptions","headers","body","fetch","createSource","Form","Row","xxs","FormGroup","for","onChange","e","target","placeholder","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","DropdownItem","onClick","indexOf","Button","color"],"mappings":"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","file":"katonicstatic/js/new-source.865bd8c6.chunk.js","sourcesContent":["const backendUrl = 'http://localhost:8000';\r\nexport default backendUrl;\r\n","const specs = {\r\n  sourceDefinitionId: 'decd338e-5647-4c0b-adf4-da0e75f5a750',\r\n  documentationUrl: 'https://docs.airbyte.io/integrations/sources/postgres',\r\n  connectionSpecification: {\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n    title: 'Postgres Source Spec',\r\n    type: 'object',\r\n    required: ['host', 'port', 'database', 'username'],\r\n    additionalProperties: false,\r\n    properties: {\r\n      host: {\r\n        title: 'Host',\r\n        description: 'Hostname of the database.',\r\n        type: 'string',\r\n        order: 0,\r\n      },\r\n      port: {\r\n        title: 'Port',\r\n        description: 'Port of the database.',\r\n        type: 'integer',\r\n        minimum: 0,\r\n        maximum: 65536,\r\n        default: 5432,\r\n        examples: ['5432'],\r\n        order: 1,\r\n      },\r\n      database: {\r\n        title: 'DB Name',\r\n        description: 'Name of the database.',\r\n        type: 'string',\r\n        order: 2,\r\n      },\r\n      username: {\r\n        title: 'User',\r\n        description: 'Username to use to access the database.',\r\n        type: 'string',\r\n        order: 3,\r\n      },\r\n      password: {\r\n        title: 'Password',\r\n        description: 'Password associated with the username.',\r\n        type: 'string',\r\n        airbyte_secret: true,\r\n        order: 4,\r\n      },\r\n      ssl: {\r\n        title: 'Connect using SSL',\r\n        description:\r\n          'Encrypt client/server communications for increased security.',\r\n        type: 'boolean',\r\n        default: false,\r\n        order: 5,\r\n      },\r\n      replication_method: {\r\n        type: 'object',\r\n        title: 'Replication Method',\r\n        description:\r\n          'Replication method to use for extracting data from the database.',\r\n        order: 6,\r\n        oneOf: [\r\n          {\r\n            title: 'Standard',\r\n            additionalProperties: false,\r\n            description:\r\n              'Standard replication requires no setup on the DB side but will not be able to represent deletions incrementally.',\r\n            required: ['method'],\r\n            properties: {\r\n              method: {\r\n                type: 'string',\r\n                enum: ['Standard'],\r\n                default: 'Standard',\r\n                order: 0,\r\n              },\r\n            },\r\n          },\r\n          {\r\n            title: 'Logical Replication (CDC)',\r\n            additionalProperties: false,\r\n            description:\r\n              'Logical replication uses the Postgres write-ahead log (WAL) to detect inserts, updates, and deletes. This needs to be configured on the source database itself. Only available on Postgres 10 and above. Read the <a href=\"https://docs.airbyte.io/integrations/sources/postgres\">Postgres Source</a> docs for more information.',\r\n            required: ['method', 'replication_slot', 'publication'],\r\n            properties: {\r\n              method: {\r\n                type: 'string',\r\n                enum: ['CDC'],\r\n                default: 'CDC',\r\n                order: 0,\r\n              },\r\n              replication_slot: {\r\n                type: 'string',\r\n                description: 'A pgoutput logical replication slot.',\r\n                order: 1,\r\n              },\r\n              publication: {\r\n                type: 'string',\r\n                description:\r\n                  'A Postgres publication used for consuming changes.',\r\n                order: 2,\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  jobInfo: {\r\n    id: '5e971d42-8c2a-41c3-88b1-cf93df5849d7',\r\n    configType: 'get_spec',\r\n    configId: 'Optional.empty',\r\n    createdAt: 1631857039345,\r\n    endedAt: 1631857096488,\r\n    succeeded: true,\r\n    logs: {\r\n      logLines: [\r\n        '2021-09-17 05:37:19 INFO  Executing worker wrapper. Airbyte version: 0.27.2-alpha',\r\n        '2021-09-17 05:37:19 INFO  stdoutLocalPort = 9002',\r\n        '2021-09-17 05:37:19 INFO  stderrLocalPort = 9003',\r\n        '2021-09-17 05:37:19 INFO  Creating stdout socket server...',\r\n        '2021-09-17 05:37:19 INFO  Creating pod...',\r\n        '2021-09-17 05:37:19 INFO  Creating stderr socket server...',\r\n        '2021-09-17 05:37:19 INFO  Waiting until command fetcher pod completes...',\r\n        '2021-09-17 05:37:39 INFO  Found entrypoint: /airbyte/base.sh',\r\n        '2021-09-17 05:37:39 INFO  Creating pod...',\r\n        '2021-09-17 05:37:39 INFO  Waiting for init container to be ready before copying files...',\r\n        '2021-09-17 05:37:39 INFO  Init container present..',\r\n        '2021-09-17 05:37:40 INFO  Init container ready..',\r\n        '2021-09-17 05:37:40 INFO  Copying files...',\r\n        '2021-09-17 05:37:40 INFO  Uploading file: FINISHED_UPLOADING',\r\n        '2021-09-17 05:37:40 INFO  Waiting until pod is ready...',\r\n        '2021-09-17 05:37:45 INFO  Setting stdout...',\r\n        '2021-09-17 05:37:45 INFO  Setting stderr...',\r\n        '2021-09-17 05:37:46 INFO  Reading pod IP...',\r\n        '2021-09-17 05:37:46 INFO  Pod IP: 10.244.5.239',\r\n        '2021-09-17 05:37:46 INFO  Using null stdin output stream...',\r\n        '2021-09-17 05:37:46 INFO  2021-09-17 05:37:46 \u001b[32mINFO\u001b[m i.a.i.s.p.PostgresSource(main):264 - {} - starting source: class io.airbyte.integrations.source.postgres.PostgresSource',\r\n        '2021-09-17 05:37:46 INFO  2021-09-17 05:37:46 \u001b[32mINFO\u001b[m i.a.i.b.IntegrationRunner(run):81 - {} - Running integration: io.airbyte.integrations.source.postgres.PostgresSource',\r\n        '2021-09-17 05:37:46 INFO  2021-09-17 05:37:46 \u001b[32mINFO\u001b[m i.a.i.b.IntegrationCliParser(parseOptions):135 - {} - integration args: {spec=null}',\r\n        '2021-09-17 05:37:46 INFO  2021-09-17 05:37:46 \u001b[32mINFO\u001b[m i.a.i.b.IntegrationRunner(run):85 - {} - Command: SPEC',\r\n        \"2021-09-17 05:37:46 INFO  2021-09-17 05:37:46 \u001b[32mINFO\u001b[m i.a.i.b.IntegrationRunner(run):86 - {} - Integration config: IntegrationConfig{command=SPEC, configPath='null', catalogPath='null', statePath='null'}\",\r\n        '2021-09-17 05:38:16 INFO  Exit code for pod airbyte-worker-ff81ae9c-cbe1-44b7-a88f-513ae0ce1446-0-nbcev is 0',\r\n        '2021-09-17 05:38:16 INFO  Port consumer releasing: 9002',\r\n        '2021-09-17 05:38:16 INFO  Port consumer releasing: 9003',\r\n        '2021-09-17 05:38:16 INFO  Stopping cancellation check scheduling...',\r\n      ],\r\n    },\r\n  },\r\n};\r\nexport default specs;\r\n","import AvFeedback from 'availity-reactstrap-validation/lib/AvFeedback';\r\nimport AvForm from 'availity-reactstrap-validation/lib/AvForm';\r\nimport AvGroup from 'availity-reactstrap-validation/lib/AvGroup';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Card, CardBody, Input, Label } from 'reactstrap';\r\nimport specs from '../../../data/sourceDestinationSpecs';\r\n// import backendUrl from '../../utils/urls';\r\n\r\nconst ConnectorsSourceFields = ({ select }) => {\r\n  const fields = specs.connectionSpecification.properties;\r\n  const [inputs, setInputs] = useState([]);\r\n  // const getSpecs = async () => {\r\n  //   const requestOptions = {\r\n  //     method: 'POST',\r\n  //     headers: { 'Content-Type': 'application/json' },\r\n  //     body: `{\r\n  //       sourceDefinitionId: ${select.sourceDefinitionId}\r\n  //       }`,\r\n  //   };\r\n  //   await fetch(\r\n  //     `${backendUrl}/platform/source_definition_specifications/get`,\r\n  //     requestOptions.then((res) => res.json())\r\n  //   );\r\n  // };\r\n  const renderInputs = () => {\r\n    const input = [];\r\n    if (fields) {\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      for (const [key, value] of Object.entries(fields)) {\r\n        // if (value.type === 'object') {\r\n        // }\r\n        input.push({\r\n          title: value.title,\r\n          type: value.type,\r\n          key,\r\n        });\r\n      }\r\n    }\r\n    setInputs(input);\r\n    return 0;\r\n  };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(async () => {\r\n    // await getSpecs();\r\n    renderInputs();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [select]);\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const onSubmit = (event, errors, values) => {\r\n    // console.log(errors);\r\n    // console.log(values);\r\n    if (errors.length === 0) {\r\n      // Comment\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line react/destructuring-assignment\r\n  return (\r\n    <div>\r\n      <Card className=\"mb-5\">\r\n        <CardBody>\r\n          <h1>{select.name}</h1>\r\n          <br />\r\n          <h1>{specs.connectionSpecification.title}</h1>\r\n          <br />\r\n          <AvForm\r\n            className=\"av-tooltip tooltip-label-right\"\r\n            onSubmit={(event, errors, values) =>\r\n              onSubmit(event, errors, values)\r\n            }\r\n          >\r\n            {inputs.map((element) => {\r\n              console.log(element.title);\r\n              return (\r\n                <AvGroup key={element.key}>\r\n                  <Label>\r\n                    {element.title}\r\n                    {specs.connectionSpecification.required.includes(\r\n                      element.key\r\n                    ) && '*'}\r\n                  </Label>\r\n                  <Input\r\n                    type={element.type}\r\n                    name={element.title}\r\n                    required={specs.connectionSpecification.required.includes(\r\n                      element.key\r\n                    )}\r\n                  />\r\n                  {specs.connectionSpecification.required.includes(\r\n                    element.key\r\n                  ) && <AvFeedback>{element.title} is required!</AvFeedback>}\r\n                </AvGroup>\r\n              );\r\n            })}\r\n          </AvForm>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConnectorsSourceFields;\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Row,\r\n} from 'reactstrap';\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport backendUrl from '../../../utils/urls';\r\nimport sources from '../../../data/sources';\r\nimport ConnectorsSourceFields from '../../../components/custom/connectors/ConnectorsSourceFields';\r\n\r\nconst NewSource = () => {\r\n  const [dropdownSplitOpen, setDropdownSplitOpen] = useState(false);\r\n  const [select, setSelect] = useState(sources.at(0));\r\n  const [name, setName] = useState('');\r\n  const history = useHistory();\r\n  const createSource = () => {\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: `\r\n        {\r\n          sourceDefinitionId: ${select.sourceDefinitionId},\r\n          connectionConfiguration: {missing-type-info},\r\n          workspaceId: uuid,\r\n          name: ${name},\r\n          }\r\n      `,\r\n    };\r\n    fetch(`${backendUrl}/platform/connectors/sources/create`, requestOptions);\r\n  };\r\n  // const [sources, setSources] = useState([]);\r\n  // useEffect(() => {\r\n  //   const requestOptions = {\r\n  //     method: 'POST',\r\n  //     headers: { 'Content-Type': 'application/json' },\r\n  //   };\r\n  //   fetch(`${backendUrl}/platform/connectors/sources/list`, requestOptions)\r\n  //     .then((res) => res.json())\r\n  //     .then((res) => setSources(res.connectorsSources.sourceDefinitions));\r\n  //   // .then((res) => setSources(res.sourceDefinitions));\r\n  // }, []);\r\n  const toggle = () => setDropdownSplitOpen((prevState) => !prevState);\r\n  const handleClick = () => {\r\n    createSource();\r\n    history.push('/app/connectors/new-destination');\r\n  };\r\n  return (\r\n    <Form>\r\n      <Card className=\"mb-5\">\r\n        <CardBody>\r\n          <Row>\r\n            <Colxx xxs=\"12\">\r\n              <h1>Create a Source</h1>\r\n            </Colxx>\r\n          </Row>\r\n          <Row>\r\n            <Colxx xxs=\"12\">\r\n              <FormGroup>\r\n                <Label for=\"sourceName\">Name of Source</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"source\"\r\n                  id=\"sourceName\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  placeholder=\"Enter name of source\"\r\n                />\r\n              </FormGroup>\r\n            </Colxx>\r\n          </Row>\r\n          <Row>\r\n            <Colxx xxs=\"12\">\r\n              <Dropdown isOpen={dropdownSplitOpen} toggle={toggle}>\r\n                <DropdownToggle caret>{select.name}</DropdownToggle>\r\n                <DropdownMenu>\r\n                  {sources.map((element) => (\r\n                    <DropdownItem\r\n                      onClick={() => {\r\n                        setSelect(element);\r\n                        // getSourceSpecs();\r\n                      }}\r\n                      key={sources.indexOf(element)}\r\n                    >\r\n                      {element.name}\r\n                    </DropdownItem>\r\n                  ))}\r\n                </DropdownMenu>\r\n              </Dropdown>\r\n            </Colxx>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <ConnectorsSourceFields select={select} />\r\n        </Colxx>\r\n      </Row>\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <Button\r\n            className=\"my-4\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              handleClick();\r\n            }}\r\n          >\r\n            Create a source\r\n          </Button>{' '}\r\n        </Colxx>\r\n      </Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default NewSource;\r\n"],"sourceRoot":""}